4a:
In order to recover our passphrase, we will need to perform a padding oracle attack utilizing Olivia as our
oracle. Because we are in AES-128, each block is 16 bytes meaning that we only have one block to target.
To start, we are going to alter our ciphertext's final byte and pass it into Olivia. If she returns True, we know that
decrypting the altered ciphertext ended with 01 which is valid padding. If she returns False, we know that our altered
ciphertext did not end with 01 and therefore did not have valid padding. We will try all 256 possibilites for that
final byte until we have an permutation that results in a True from Olivia, indicating correct padding. Once we have
the altered byte that results in correct 01 padding, we will xor our altered byte with the original ciphertext
byte and then xor that with 01 so that we will be left with the final byte of the original plaintext. Now that we
have our final plaintext byte discovered, we can move on to the second byte. To discover the second byte of the plaintext,
we must first alter the first ciphertext byte so that we are left with 02. To do this, we xor the final bytes ciphertext
with the plaintext that we now know and then xor that with 02 so that we are left with our final byte being 02. We then once
again alter the original ciphertext, this time making the final byte the value that will lead to 02 and going through all
256 permutations until Olivia lets us know that we have valid padding once more. We then xor the altered second to last byte with
the original second to last ciphertext byte and then finally xor that with 02 to be left with the second to last byte in
the original plaintxt. We repeat this process once again, xor our bytes so that the first and second bytes are both 03 and then
once again run through all 256 permutations for the third to last byte until we have valid padding once more and can then discover
the third to last plaintext byte. We repeat this process for all 16 bytes in the ciphertext until we have deduced all
16 bytes of the plaintext at which point we will be left with our newly decrypted passphrase.

4b:
To whoever is grading this:

While I do not have the time left to correctly implement this padding oracle attack, I am extremely confident that I could. I understand how the attack works to an extreme degree
and that goes double for when the plaintext is all encrypted within the same block. I'd even go as far as to say I could do it by hand if given enough time.
I have been helplessly attempting to get Olivia to work properly but to no avail. We were not provided any real documentation on how to properly implement and use Olivia,
only two small examples with no explanation attached.  I set aside hours of my day for this singular part of a singular problem and yet my own technical difficulties held me back. 
Is this my fault for not starting earlier? I am sure that was a factor. But do I also feel like I am getting robbed of 20 points because of a lack of support and real framework to 
work with? Absolutely. I feel as though I am being penalized for not knowing how to work with unfamiliar software, not because I do not know how to implement a padding oracle attack 
to decrypt 16 bytes of ciphertext. I worked on the homework sequentially and did not come across these problems until it was too late. I am sure that I will do extra credit on another
assignment to make up for this loss but the fact that I am losing points not becasue I do not grasp the material but because I am being forced to deal with the technical problems and
unfamiliarity of outside software that I do not know the innerworkings of is beyond infuriating. There are multiple coding demos every week yet not one for a blackbox padding oracle that 
literally every student in the class is going to use at some point? I am aware that I am ranting and I'm sure that this frustration will disipate with time but the point still stands.
I can't help but feel that there is an extremely unfair aspect to this. I know I should've probably asked for help earlier but I genuinely expected some documentation and framework for
how to work Olivia in the same way that you would expect us to provide documentation for our functions so that you aren't forced to figure out how they work. I feel like that necessity is only
increased when it is a blackbox that doesn't even allow you to look at its innerworkings. If an extension with an explanation of how to use Olivia were to come my way, I would be nothing
but grateful and blessed. But if this rant is all for not, so be it.

Best,

Clay Wilfong